package assg1;

import java.awt.List;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;



class Index{
	int x;
	int y;
	public Index(int x, int y){
		this.x=x;
		this.y=y;
	}
}

class letter{
	String s;
	int posx;
	int posy;
	int num;
	ArrayList<Index> loc = new ArrayList<Index>();
	
	public letter(String l, int y, int x, int n){
		this.s = l;
		this.posy = y;
		this.posx = x;
		this.num = n;
	}
}

public class Solver {
	
	/*Global variables to instantiate the Width, Height and Number variables
	 * these variables will be given values from the readValue method
	 */
	HashSet<letter> set = new HashSet<letter>();
	public static int W=0;
	public static int H=0;
	public static int N=0;
	public HashMap<String, Integer> sections = new HashMap<String, Integer>();
	public HashMap<String, Integer> sectionsLimit = new HashMap<String, Integer>();
	public String[][]arr;

	
	
	public static void main(String[] args) {
		//Solver s = new Solver();
		//s.solve(null);
		//printArr(arr);
	}
	
	/** The solve method accepts a String containing the 
	 * path to the input file of a space partition problem
	 * as described in the assignment specification and 
	 * returns a two-dimensional String array containing 
	 * the solution.
	 * 
	 * @param infile the input file containing the problem
	 * @return solution to the space partition problem
	 */
	public String[][] solve(String infile){
		
		/*
		 Here is a simple try-catch block for readData.
		 If you don't know what try/catch and exceptions are,
		 you don't have to worry about it for this unit, but
		 it would be good if you can learn a bit of it.
		*/
		String [][] grid = new String[W][H];
		try {
			
			
			readData(infile);
			printArr(arr);

			
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return arr;
	}
	

	public static void printArr(String[][] arr){
		for(int i = 0; i<arr.length; i++){
			System.out.println("");
			for(int j = 0; j<arr[0].length; j++){
				System.out.print(arr[i][j]+ " ");
			}
		}
		System.out.println("");
	}
	
	
	/**
	 * The readData method accepts a String containing the 
	 * path to the input file containing the details of the
	 * problem (size of grid, number of sections, etc). 
	 * Please see the assignment specification for more information
	 * on the input format.
	 * 
	 * You should use this method to populate this class with 
	 * the information that you need to solve the problem.
	 * 
	 * I also recommend the use of Scanner class (I have written a
	 * little bit for you to start with), but you may choose to
	 * use something else. 
	 * 
	 * @param infile the input file containing the problem
	 * @throws Exception if file is not found or there is input reading error
	 */	
	public void readData(String infile) throws Exception{
		//String[][] rGrid = new String[W][H];
		try{
			File txt = new File(infile);
			Scanner input = new Scanner(txt);
			int lineNumber = 1;
			while(input.hasNextLine()){
				String line = input.nextLine();
				System.out.println("line" + lineNumber +  " : " + line);
				lineNumber++;
			}
		
			
		}catch(FileNotFoundException e){
			System.out.println("mission failed");
			e.printStackTrace();			
		}
		
	}		
	
	
}
